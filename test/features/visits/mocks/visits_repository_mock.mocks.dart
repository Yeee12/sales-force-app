// Mocks generated by Mockito 5.4.6 from annotations
// in sales_force_automation/test/features/visits/mocks/visits_repository_mock.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:sales_force_automation/core/models/activity.dart' as _i6;
import 'package:sales_force_automation/core/models/customer_model.dart' as _i5;
import 'package:sales_force_automation/core/models/visit.dart' as _i2;
import 'package:sales_force_automation/features/visits/data/repositories/visits_repository.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeVisit_0 extends _i1.SmartFake implements _i2.Visit {
  _FakeVisit_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [VisitsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockVisitsRepository extends _i1.Mock implements _i3.VisitsRepository {
  MockVisitsRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.Visit>> getVisits() =>
      (super.noSuchMethod(
            Invocation.method(#getVisits, []),
            returnValue: _i4.Future<List<_i2.Visit>>.value(<_i2.Visit>[]),
          )
          as _i4.Future<List<_i2.Visit>>);

  @override
  _i4.Future<_i2.Visit> createVisit(_i2.Visit? visit) =>
      (super.noSuchMethod(
            Invocation.method(#createVisit, [visit]),
            returnValue: _i4.Future<_i2.Visit>.value(
              _FakeVisit_0(this, Invocation.method(#createVisit, [visit])),
            ),
          )
          as _i4.Future<_i2.Visit>);

  @override
  _i4.Future<_i2.Visit> updateVisit(_i2.Visit? visit) =>
      (super.noSuchMethod(
            Invocation.method(#updateVisit, [visit]),
            returnValue: _i4.Future<_i2.Visit>.value(
              _FakeVisit_0(this, Invocation.method(#updateVisit, [visit])),
            ),
          )
          as _i4.Future<_i2.Visit>);

  @override
  _i4.Future<void> syncLocalVisits() =>
      (super.noSuchMethod(
            Invocation.method(#syncLocalVisits, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<List<_i5.Customer>> getCustomers() =>
      (super.noSuchMethod(
            Invocation.method(#getCustomers, []),
            returnValue: _i4.Future<List<_i5.Customer>>.value(<_i5.Customer>[]),
          )
          as _i4.Future<List<_i5.Customer>>);

  @override
  _i4.Future<List<_i6.Activity>> getActivities() =>
      (super.noSuchMethod(
            Invocation.method(#getActivities, []),
            returnValue: _i4.Future<List<_i6.Activity>>.value(<_i6.Activity>[]),
          )
          as _i4.Future<List<_i6.Activity>>);

  @override
  _i4.Future<bool> forceSyncAll() =>
      (super.noSuchMethod(
            Invocation.method(#forceSyncAll, []),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<void> testSyncOnly() =>
      (super.noSuchMethod(
            Invocation.method(#testSyncOnly, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}
